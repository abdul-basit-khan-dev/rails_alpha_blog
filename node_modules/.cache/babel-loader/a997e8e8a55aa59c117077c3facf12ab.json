{"ast":null,"code":"//===================================================== Create a WebGL renderer\nvar renderer = new THREE.WebGLRenderer({\n  canvas: document.querySelector(\"canvas\"),\n  powerPreference: \"high-performance\"\n});\nrenderer.setSize(window.innerWidth, window.innerHeight); //===================================================== Create an empty scene\n\nvar scene = new THREE.Scene(); //===================================================== Create a perpsective camera\n\nvar camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.001, 1000);\ncamera.position.z = 400; //===================================================== resize\n\nwindow.addEventListener(\"resize\", function () {\n  renderer.setSize(window.innerWidth, window.innerHeight);\n  camera.aspect = window.innerWidth / window.innerHeight;\n  camera.updateProjectionMatrix();\n}); //===================================================== Array of points\n\nvar points = [[68.5, 185.5], [1, 262.5], [270.9, 281.9], [345.5, 212.8], [178, 155.7], [240.3, 72.3], [153.4, 0.6], [52.6, 53.3], [68.5, 185.5]]; //===================================================== Convert the array of points into vertices\n\nfor (var i = 0; i < points.length; i++) {\n  var x = points[i][0];\n  var y = 0;\n  var z = points[i][1];\n  points[i] = new THREE.Vector3(x, y, z);\n} //===================================================== Create a path from the points\n\n\nvar path = new THREE.CatmullRomCurve3(points); //===================================================== Create the tube geometry from the path\n\nvar sides = 3;\nvar geometry = new THREE.TubeGeometry(path, 300, 4, sides, true); //===================================================== Basic material\n\nvar material = new THREE.MeshBasicMaterial({\n  side: THREE.BackSide,\n  map: new THREE.TextureLoader().load('https://raw.githubusercontent.com/baronwatts/images/master/map5.png')\n});\nmaterial.map.wrapS = THREE.RepeatWrapping;\nmaterial.map.wrapT = THREE.RepeatWrapping;\nmaterial.map.repeat.set(10, 1); //===================================================== Create a mesh\n\nvar tube = new THREE.Mesh(geometry, material);\ntube.matrixAutoUpdate = false; //wont be moving so no need to update\n\nscene.add(tube); //===================================================== Create a point light in our scene\n\nvar light = new THREE.PointLight(new THREE.Color(\"white\"), 1, 100);\nscene.add(light); //===================================================== Animate\n\nvar percentage = 0;\n\nfunction animate() {\n  percentage += 0.0005;\n  var p1 = path.getPointAt(percentage % 1);\n  var p2 = path.getPointAt((percentage + 0.03) % 1);\n  camera.position.set(p1.x, p1.y, p1.z);\n  camera.lookAt(p2);\n  light.position.set(p2.x, p2.y, p2.z); //Render the scene\n\n  renderer.render(scene, camera);\n  requestAnimationFrame(animate);\n}\n\nanimate();","map":{"version":3,"sources":["/media/basit/f-drive/backup/ALL_PROJECTS/UDEMY/Ruby on Rails/MY_CODE/RUBY_PROJECTS/ALPHA_BLOG_APP/app/frontend/packs/about.js"],"names":["renderer","THREE","WebGLRenderer","canvas","document","querySelector","powerPreference","setSize","window","innerWidth","innerHeight","scene","Scene","camera","PerspectiveCamera","position","z","addEventListener","aspect","updateProjectionMatrix","points","i","length","x","y","Vector3","path","CatmullRomCurve3","sides","geometry","TubeGeometry","material","MeshBasicMaterial","side","BackSide","map","TextureLoader","load","wrapS","RepeatWrapping","wrapT","repeat","set","tube","Mesh","matrixAutoUpdate","add","light","PointLight","Color","percentage","animate","p1","getPointAt","p2","lookAt","render","requestAnimationFrame"],"mappings":"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","sourcesContent":["//===================================================== Create a WebGL renderer\nvar renderer = new THREE.WebGLRenderer({\n  canvas: document.querySelector(\"canvas\"),\n  powerPreference: \"high-performance\"\n});\nrenderer.setSize(window.innerWidth, window.innerHeight);\n\n//===================================================== Create an empty scene\nvar scene = new THREE.Scene();\n\n//===================================================== Create a perpsective camera\nvar camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.001, 1000);\ncamera.position.z = 400;\n\n\n//===================================================== resize\nwindow.addEventListener(\"resize\", function() {\n  renderer.setSize(window.innerWidth, window.innerHeight);\n  camera.aspect = window.innerWidth / window.innerHeight;\n  camera.updateProjectionMatrix();\n});\n\n\n//===================================================== Array of points\nvar points = [\n  [68.5,185.5],\n  [1,262.5],\n  [270.9,281.9],\n  [345.5,212.8],\n  [178,155.7],\n  [240.3,72.3],\n  [153.4,0.6],\n  [52.6,53.3],\n  [68.5,185.5]\n];\n\n//===================================================== Convert the array of points into vertices\nfor (var i = 0; i < points.length; i++) {\n  var x = points[i][0];\n  var y = 0;\n  var z = points[i][1];\n  points[i] = new THREE.Vector3(x, y, z);\n}\n//===================================================== Create a path from the points\nvar path = new THREE.CatmullRomCurve3(points);\n\n//===================================================== Create the tube geometry from the path\nvar sides = 3;\nvar geometry = new THREE.TubeGeometry( path, 300, 4, sides, true );\n\n//===================================================== Basic material\nvar material = new THREE.MeshBasicMaterial({\n  side : THREE.BackSide,\n  map: new THREE.TextureLoader().load('https://raw.githubusercontent.com/baronwatts/images/master/map5.png')\n});\n material.map.wrapS = THREE.RepeatWrapping;\nmaterial.map.wrapT= THREE.RepeatWrapping;\nmaterial.map.repeat.set(10, 1)\n//===================================================== Create a mesh\nvar tube = new THREE.Mesh( geometry, material );\ntube.matrixAutoUpdate = false;//wont be moving so no need to update\nscene.add( tube );\n\n//===================================================== Create a point light in our scene\nvar light = new THREE.PointLight(new THREE.Color(\"white\"),1, 100);\nscene.add(light);\n\n\n//===================================================== Animate\nvar percentage = 0;\n\nfunction animate() {\n  percentage += 0.0005;\n  var p1 = path.getPointAt(percentage%1);\n  var p2 = path.getPointAt((percentage + 0.03)%1);\n  camera.position.set(p1.x,p1.y,p1.z);\n  camera.lookAt(p2);\n  light.position.set(p2.x, p2.y, p2.z);\n\n  //Render the scene\n  renderer.render(scene, camera);\n  requestAnimationFrame(animate);\n}\n\nanimate();\n"]},"metadata":{},"sourceType":"module"}